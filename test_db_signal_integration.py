#!/usr/bin/env python3
"""
Test Database Signal Integration
Test the complete database signal monitoring integration
"""

import sys
import os
from PyQt6 import QtWidgets, QtCore
from database_signal_monitor import DatabaseSignalButton, get_global_monitor

def test_database_signal_system():
    """Test the complete database signal monitoring system"""
    print("üß™ TESTING DATABASE SIGNAL INTEGRATION")
    print("=" * 60)
    
    # Test 1: Check if icons exist
    print("1Ô∏è‚É£ Checking database signal icons...")
    icon_dir = os.path.join(os.path.dirname(__file__), "emoji")
    required_icons = [
        "db_unavailable_30x30.png",
        "wifi_weak_30x30.png",
        "wifi_okish_30x30.png", 
        "wifi_strong_30x30.png",
        "wifi_verystrong_30x30.png"
    ]
    
    all_icons_exist = True
    for icon in required_icons:
        icon_path = os.path.join(icon_dir, icon)
        if os.path.exists(icon_path):
            print(f"   ‚úÖ {icon}")
        else:
            print(f"   ‚ùå {icon} - Missing!")
            all_icons_exist = False
    
    if not all_icons_exist:
        print("   ‚ö†Ô∏è Some icons are missing. Run resize_db_icons_qt.py first.")
        return False
    
    print()
    
    # Test 2: Test database signal monitor
    print("2Ô∏è‚É£ Testing database signal monitor...")
    try:
        monitor = get_global_monitor()
        signal_strength, icon_path = monitor.get_current_signal()
        print(f"   Current signal: {signal_strength}")
        print(f"   Icon path: {icon_path}")
        print(f"   Icon exists: {'‚úÖ Yes' if os.path.exists(icon_path) else '‚ùå No'}")
    except Exception as e:
        print(f"   ‚ùå Error testing monitor: {e}")
        return False
    
    print()
    
    # Test 3: Test signal button creation
    print("3Ô∏è‚É£ Testing database signal button...")
    try:
        app = QtWidgets.QApplication(sys.argv)
        button = DatabaseSignalButton(None, 30)
        print(f"   Button created: ‚úÖ Yes")
        print(f"   Button size: {button.size().width()}x{button.size().height()}")
        print(f"   Monitoring active: {'‚úÖ Yes' if button.monitor.monitoring else '‚ùå No'}")
        
        # Test signal strength
        signal_strength, icon_path = button.get_current_signal()
        print(f"   Current signal: {signal_strength}")
        
    except Exception as e:
        print(f"   ‚ùå Error testing button: {e}")
        return False
    
    print()
    
    # Test 4: Test signal strength mapping
    print("4Ô∏è‚É£ Testing signal strength mapping...")
    signal_mappings = {
        "unavailable": ("#FF0000", "db_unavailable_30x30.png"),
        "weak": ("#FF0000", "wifi_weak_30x30.png"),
        "okayish": ("#FFA500", "wifi_okish_30x30.png"),
        "good": ("#FFFF00", "wifi_strong_30x30.png"),
        "strong": ("#00FF00", "wifi_strong_30x30.png"),
        "verystrong": ("#00FF00", "wifi_verystrong_30x30.png")
    }
    
    for strength, (color, icon) in signal_mappings.items():
        monitor_color = button.monitor.get_signal_color(strength)
        monitor_icon = button.monitor._get_icon_path(strength)
        
        color_match = monitor_color == color
        icon_match = icon in monitor_icon
        
        print(f"   {strength}:")
        print(f"     Color: {'‚úÖ' if color_match else '‚ùå'} {monitor_color}")
        print(f"     Icon: {'‚úÖ' if icon_match else '‚ùå'} {os.path.basename(monitor_icon)}")
    
    print()
    
    # Test 5: Test Login.ui integration
    print("5Ô∏è‚É£ Testing Login.ui integration...")
    login_ui_path = os.path.join(os.path.dirname(__file__), "Login.ui")
    if os.path.exists(login_ui_path):
        with open(login_ui_path, "r") as f:
            ui_content = f.read()
        
        if "dbstrength" in ui_content:
            print("   ‚úÖ dbstrength button found in Login.ui")
        else:
            print("   ‚ùå dbstrength button not found in Login.ui")
            return False
    else:
        print("   ‚ùå Login.ui file not found")
        return False
    
    print()
    
    print("üéâ DATABASE SIGNAL INTEGRATION TEST COMPLETED!")
    print("‚úÖ All components are working correctly")
    print("‚úÖ Icons are properly sized and available")
    print("‚úÖ Signal monitoring is functional")
    print("‚úÖ Login.ui integration is ready")
    print()
    print("üéØ Ready for live testing!")
    print("üì± Run main.py to see the database signal button in action")
    
    return True

def create_demo_window():
    """Create a demo window showing the database signal button"""
    print("\nüì± CREATING DEMO WINDOW")
    print("=" * 30)
    
    app = QtWidgets.QApplication(sys.argv)
    
    # Create demo window
    window = QtWidgets.QWidget()
    window.setWindowTitle("Database Signal Monitor Demo")
    window.setGeometry(100, 100, 300, 200)
    
    layout = QtWidgets.QVBoxLayout(window)
    
    # Title
    title = QtWidgets.QLabel("Database Signal Monitor")
    title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 10px;")
    title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
    layout.addWidget(title)
    
    # Signal button
    signal_button = DatabaseSignalButton(window, 30)
    signal_button.start_monitoring(1000)
    layout.addWidget(signal_button)
    
    # Status label
    status_label = QtWidgets.QLabel("Checking database signal...")
    status_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
    layout.addWidget(status_label)
    
    # Connect updates
    signal_button.monitor.signal_strength_changed.connect(
        lambda strength, path: status_label.setText(f"Database: {strength.title()}")
    )
    
    window.show()
    
    print("‚úÖ Demo window created")
    print("üîç Database signal monitoring active")
    print("üì° Updates every 1 second")
    print("üéØ Close window to exit")
    
    return app.exec()

def main():
    """Main test function"""
    print("DATABASE SIGNAL INTEGRATION TEST")
    print("=" * 60)
    print("This test verifies the complete database signal monitoring system")
    print()
    
    try:
        # Test the system
        success = test_database_signal_system()
        
        if success:
            print("\nüéØ SYSTEM READY!")
            print("‚úÖ Database signal monitoring is fully integrated")
            print("‚úÖ Real-time updates every 1 second")
            print("‚úÖ Signal strength mapping works correctly")
            print("‚úÖ Icons are properly sized and available")
            print("‚úÖ Login page integration is complete")
            print()
            print("üì± The dbstrength button will appear on the login page")
            print("üì° It will show real-time database connection status")
            print("üé® Icons change color based on signal strength")
            
            # Ask if user wants to see demo
            print("\nüéÆ Would you like to see a demo window? (y/n)")
            response = input().lower().strip()
            if response in ['y', 'yes']:
                create_demo_window()
        else:
            print("\n‚ùå SYSTEM NOT READY")
            print("Please fix the issues above before testing")
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
